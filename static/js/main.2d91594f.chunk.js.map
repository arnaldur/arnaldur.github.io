{"version":3,"sources":["components/RecipeName.jsx","components/RecipeList.jsx","components/RecipeDetail.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["RecipeName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","name","sha","_this2","stored","localStorage","getItem","setState","fetch","then","res","text","result","arr","exec","length","setItem","match","tag_rx","tag2name","JSON","parse","tag","names","stringify","_this$state","React","Component","RecipeList","isLoaded","items","json","result_filtered","filter","x","endsWith","react_default","a","createElement","message","Container_default","className","Row_default","Col_default","map","item","key","react_router_dom","to","concat","components_RecipeName","ReactMarkdown","require","RecipeDetail","data","file","e","target","setAttribute","console","log","recipe_image","replace","Image_default","fluid","src","onError","source","Index","components_RecipeList","RecipeDetailRoute","_ref","components_RecipeDetail","params","filename","AppRouter","basename","process","Navbar_default","bg","variant","Brand","href","alt","sigga_logo","width","height","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2d91594f.chunk.js","sourcesContent":["import React from \"react\";\n\nclass RecipeName extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      name: props.name,\n      sha: props.sha\n    };\n  }\n\n  componentDidMount() {\n    var stored = localStorage.getItem(this.state.sha)\n\n    if(stored) {\n      this.setState({\n        name: stored\n      })\n    } else {\n      fetch(\"https://raw.githubusercontent.com/arnaldur/uppskriftir/master/\" + this.state.name)\n      .then(res => res.text())\n      .then(\n        (result) => {\n          // Extract titles\n          var rx = /# (.*)\\n/;\n          var arr = rx.exec(result);\n          if( arr && arr.length > 0 ){\n            this.setState({\n               name: arr[1]\n            });\n            localStorage.setItem(this.state.sha, this.state.name);\n          }\n\n          //extract tags\n          var tag_rx = /(^|\\s)(#[a-z\\d-]+)/ig;\n          var stored_tag2name = JSON.parse(localStorage.getItem(\"tag2name\"))\n          var tag2name = stored_tag2name || {};\n\n          var match;\n          while(match = tag_rx.exec(result)) {\n            var tag = match[2];\n\n            // If we found a tag we add the name of the recipe to the set\n            // belonging to that tag\n            if(tag){\n              var names = tag2name[tag];\n              if(names == null) {\n                names = {};\n              }\n              names[this.state.name] = true;\n              // Push the names back into the index\n              tag2name[tag] = names;\n            }\n          }\n\n          localStorage.setItem(\"tag2name\", JSON.stringify(tag2name));\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            error\n          });\n        }\n      )\n    }\n  }\n\n  render() {\n    const { error, name, sha} = this.state;\n    return name;\n  }\n}\n\nexport default RecipeName;\n","import React from \"react\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport RecipeName from './RecipeName';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nclass RecipeList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.github.com/repos/arnaldur/uppskriftir/contents/\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          const result_filtered = result.filter((x) => x.name.endsWith(\".md\") )\n          this.setState({\n            isLoaded: true,\n            items: result_filtered\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <Container><Row><Col><div>Loading...</div></Col></Row></Container>;\n    } else {\n      return (\n          <Container className='mt-5'>\n            <Row>\n              <Col>\n              {items.map(item => (\n                <div key={item.name}>\n                  <Link to={`/recipes/${item.name}`}>\n                    <RecipeName sha={item.sha} name={item.name}/>\n                  </Link>\n                </div>\n              ))}\n              </Col>\n            </Row>\n          </Container>\n      );\n    }\n  }\n}\n\nexport default RecipeList;\n","import React from \"react\";\nimport Image from 'react-bootstrap/Image'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nconst ReactMarkdown = require('react-markdown')\n\nclass RecipeDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://raw.githubusercontent.com/arnaldur/uppskriftir/master/\" + this.props.file)\n      .then(res => res.text())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            data: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  onError(e) {\n    e.target.setAttribute(\"src\", \"\");\n  }\n\n  render() {\n    const { error, isLoaded, data } = this.state;\n    console.log(data);\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <Container><Row><Col><div>Loading...</div></Col></Row></Container>;\n    } else {\n      const recipe_image = \"https://raw.githubusercontent.com/arnaldur/uppskriftir/master/\" + this.props.file.replace(\"md\", \"jpg\");\n      return (\n        <Container className='mt-5'>\n          <Row>\n            <Col>\n              <Image fluid src={recipe_image} onError={this.onError}/>\n              <ReactMarkdown source={data} />\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  }\n}\n\nexport default RecipeDetail;\n","import React from \"react\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nimport RecipeName from './components/RecipeName';\nimport RecipeList from './components/RecipeList';\nimport RecipeDetail from './components/RecipeDetail';\n\nimport sigga_logo from './logo.svg'\n\nfunction Index() {\n  return <RecipeList name=\"Sigga\"/>\n}\n\nfunction RecipeDetailRoute({match}) {\n  return <RecipeDetail file={match.params.filename}/>\n}\n\nfunction AppRouter() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"/\">\n            <img\n              alt=\"\"\n              src={sigga_logo}\n              width=\"50\"\n              height=\"50\"\n              className=\"ml-5 mr-3 d-inline-block align-center\"\n            />\n            {'  Eldhús Siggu'}\n          </Navbar.Brand>\n        </Navbar>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/recipes/:filename\" component={RecipeDetailRoute} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.7098ef04.svg\";"],"sourceRoot":""}